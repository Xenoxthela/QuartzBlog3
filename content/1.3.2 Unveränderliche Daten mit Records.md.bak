---
tags:
  - publish
  - java
  - record
  - java-advanced
---
**Unveränderliche Daten mit Records in Java**

Sammlung Stickpunkte:

* Vererbung nicht möglich!
* 

---
### Einleitung

Die Kunst der Softwareentwicklung besteht nicht nur darin, funktionierenden Code zu schreiben, sondern ihn verständlich, wartbar und robust zu gestalten. Ein zentrales Konzept, das zu diesen Zielen beiträgt, ist die Unveränderlichkeit. Java hat mit der Einführung von Records einen bedeutenden Schritt in Richtung effizienterer unveränderlicher Datenstrukturen gemacht.

### Das Grundkonzept von Records

Records, eingeführt in Java 14 als Vorschau und stabilisiert in Java 16, sind kompakte, unveränderliche Datenbehälter. Sie vereinfachen die Definition von Klassen, die lediglich Daten tragen, erheblich.

Beispiel:

```java
record Point(int x, int y) {}
```

Dies definiert einen Punkt in einem 2D-Raum mit den Koordinaten x und y.

### Vorteile von Records

1. **Weniger Boilerplate**: Der Compiler generiert automatisch Methoden wie `equals()`, `hashCode()`, `toString()` und Getter für alle Felder.
2. **Unveränderlichkeit**: Records sind von Grund auf unveränderlich, was zu sichererem Code führt.
3. **Performance**: Da der Compiler genau weiß, wie ein Record aufgebaut ist, kann er Optimierungen vornehmen.

### Anwendungsbeispiele

**1. Datenobjekte in Anwendungen und APIs**
   
   Stellen Sie sich eine RESTful-API vor, die Informationen über Bücher bereitstellt. Ein `Book`-Record könnte so aussehen:

```java
record Book(String title, String author, int yearPublished) {}
```

**2. Rückgabewerte von Methoden**

   Bei komplexeren Rückgabewerten, die mehr als eine Information enthalten, können Records anstelle von `Pair` oder `Tuple` Klassen verwendet werden.

```java
public Record Range(int min, int max) {}

public Range findRange(List<Integer> numbers) {
    return new Range(Collections.min(numbers), Collections.max(numbers));
}
```

### Corner Cases und Einschränkungen

**1. Erweiterung**

   Records können keine anderen Klassen erweitern und auch nicht von anderen Klassen erweitert werden.

**2. Instanzvariablen**

   Obwohl alle Felder eines Records `final` sind, muss der Entwickler sicherstellen, dass die referenzierten Objekte selbst unveränderlich sind.

Beispiel:

```java
record DataContainer(List<String> data) {}
```

Die Liste `data` selbst kann nicht geändert werden, aber ihre Inhalte können modifiziert werden, es sei denn, es handelt sich um eine unveränderliche Liste.

### Best Practices

1. **Verwenden Sie Records sparsam**: Nicht jedes Datenobjekt sollte als Record definiert werden. Verwenden Sie sie, wenn Unveränderlichkeit und Einfachheit gefordert sind.
2. **Achten Sie auf die Unveränderlichkeit**: Wenn Sie Collections in Records verwenden, stellen Sie sicher, dass sie unveränderlich sind, z.B. mit `Collections.unmodifiableList()`.

### Fazit

Java-Records bieten einen eleganten Weg, unveränderliche Datenstrukturen zu definieren. Sie fördern Best Practices in der Softwareentwicklung und können zu saubererem, effizienterem Code führen. Entwickler, die sich diese Konzepte zu eigen machen, sind besser darauf vorbereitet, robuste und wartbare Softwarelösungen zu erstellen.


---

### Unterschiede final const und records

In Java werden die Begriffe `final`, `const` und `record` für verschiedene Konzepte verwendet. Hier sind ihre Unterschiede und ihre jeweiligen Anwendungen:

### 1. `final`

Der Modifikator `final` in Java kann in verschiedenen Kontexten verwendet werden:

- **Final-Klassen**: Eine Klasse, die mit `final` deklariert ist, kann nicht erweitert (vererbt) werden. Das bedeutet, dass keine andere Klasse von einer `final`-Klasse erben kann.

    ```java
    final class ImmutableClass {}
    ```

- **Final-Methoden**: Eine Methode, die mit `final` deklariert ist, kann in einer Unterklasse nicht überschrieben werden.

    ```java
    public final void myMethod() {}
    ```

- **Final-Variablen**: Eine Variable, die mit `final` deklariert ist, kann nur einmal zugewiesen werden. Nach der Initialisierung kann ihr Wert nicht mehr geändert werden.

    ```java
    final int myNumber = 42;
    ```

### 2. `const`

Tatsächlich gibt es in Java keinen Modifikator `const` wie in vielen anderen Programmiersprachen. Allerdings wird das Schlüsselwort `const` als reserviertes Wort betrachtet, es hat jedoch keine Funktionalität und sollte daher nicht verwendet werden.

In anderen Sprachen wie C++ oder C# ermöglicht `const` die Deklaration von Konstanten, deren Werte nach der Initialisierung nicht geändert werden können.

### 3. `record`

- **Records in Java**: Wie bereits erwähnt, sind Records in Java eine spezielle Art von Datenklassen, die hauptsächlich dazu dienen, Daten zu tragen. Sie sind von Natur aus unveränderlich.

    ```java
    record Point(int x, int y) {}
    ```

    In einem `record` sind alle Felder automatisch `final`. Das bedeutet, dass ihre Werte nach der Initialisierung nicht mehr geändert werden können. Dies macht Records ideal für die Darstellung von unveränderlichen Datenstrukturen.

### Zusammenfassung:

- `final`: Stellt Unveränderlichkeit für Klassen, Methoden und Variablen sicher.
- `const`: Ein reserviertes Wort in Java ohne aktuelle Funktion.
- `record`: Eine spezielle Art von Klassen in Java für unveränderliche Datenstrukturen. Alle Felder in einem `record` sind automatisch `final`.

Hoffentlich klärt dies die Unterschiede zwischen diesen Konzepten in Java auf. Es ist wichtig zu beachten, dass der spezifische Gebrauch und die Bedeutung dieser Begriffe je nach Programmiersprache variieren können.

 ?

Es ist nicht möglich, die Java-Version in VS Code über das Terminal zu ändern. Stattdessen müssen Sie die Java-Version in den Einstellungen des Editors ändern. Öffnen Sie dazu Datei > Einstellungen (Strg + K, Strg + S) und suchen Sie nach der Option "Java: Home" im Bereich Erweitert. Hier können Sie die gewünschte Java-Version auswählen.wie ändere ich die Java Version in VS code auf 17 im Terminal
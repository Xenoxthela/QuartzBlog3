---
tags:
  - publish
---
## **Pattern Matching für `instanceof` in Java: Vertiefung**

### **Traditionelle Verwendung von `instanceof`**

In der Vergangenheit führte die Verwendung von `instanceof` oft zu unnötigem und redundantem Code. Zum Beispiel:

```java
if (obj instanceof Integer) {
    Integer intObj = (Integer) obj;
    System.out.println(intObj + 10);
}
```

### **Pattern Matching mit `instanceof`**

Das moderne Pattern Matching erlaubt uns, denselben Code wie folgt zu schreiben:

```java
if (obj instanceof Integer intObj) {
    System.out.println(intObj + 10);
}
```

### **Weitere Anwendungsbeispiele**

**1. In Verbindung mit `switch`-Ausdrücken**

Das Pattern Matching kann auch in Verbindung mit den neuen `switch`-Ausdrücken in Java verwendet werden, um verschiedene Aktionen basierend auf dem Typ eines Objekts auszuführen:

```java
Object myObj = ...; // Einige Quelle für das Objekt

switch (myObj) {
    case String s -> System.out.println("Es ist ein String: " + s);
    case Integer i -> System.out.println("Es ist eine Ganzzahl: " + i);
    case Double d -> System.out.println("Es ist eine Gleitkommazahl: " + d);
    default -> System.out.println("Unbekannter Typ");
}
```

**2. Komplexe Hierarchien und Interfaces**

Das Pattern Matching funktioniert auch wunderbar bei der Arbeit mit komplexen Klassenstrukturen oder Interfaces.

```java
interface Shape {}
class Circle implements Shape {
    public void drawCircle() { ... }
}
class Square implements Shape {
    public void drawSquare() { ... }
}

if (shape instanceof Circle circle) {
    circle.drawCircle();
} else if (shape instanceof Square square) {
    square.drawSquare();
}
```

### **Sonderfälle und Grenzen**

**1. Variablen-Shadowing**

Das Pattern Matching für `instanceof` führt ein neues lokales Variablen-Binding ein. Wenn es bereits eine Variable mit dem gleichen Namen in einem äußeren Scope gibt, wird die äußere Variable für den Scope des `if`-Blocks überschattet.

**2. Null-Werte**

Das Pattern Matching für `instanceof` erkennt automatisch, wenn das überprüfte Objekt `null` ist und gibt `false` zurück. Dies vereinfacht den Code, da keine explizite `null`-Prüfung erforderlich ist.

```java
if (null instanceof String s) { // gibt immer false zurück
    // Dieser Block wird nie ausgeführt
}
```

**3. Unveränderlichkeit**

Ein interessanter Aspekt des Pattern Matchings ist, dass die eingeführte Variable implizit `final` ist. Das bedeutet, sie kann nach ihrer Einführung nicht geändert werden.

### **Fazit**

Pattern Matching für `instanceof` ist ein kraftvolles Feature, das zur Verbesserung der Code-Lesbarkeit und -Sicherheit in Java beiträgt. Es ermöglicht eine präzisere und elegantere Art, Typüberprüfungen und -konvertierungen durchzuführen, wobei viele der traditionellen Fallstricke und Boilerplate-Codes eliminiert werden. Durch das Verstehen und Anwenden dieses Features können Java-Entwickler effizienteren und saubereren Code schreiben.